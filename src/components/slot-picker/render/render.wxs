

/**
 * 是否达到循环滚动的条件
 */
function isLoopScroll(state) {
    return state.props.isloop && state.listData.length >= parseInt(state.props.rows/2)+1;
}

/**
 * 计算时否超出来滚距离
 */
function calcOverScroll(touch, state){
 
    if(isLoopScroll(state) && !touch) {
        if (state.transformY > maxLast(state)) {
            state.transformY = maxLast(state); 
        }
        
        if (state.transformY < -minLast(state)) {
            state.transformY = -minLast(state);
        }
    }else{
        if (state.transformY > 0) {
            state.transformY = 0;
        }
        if (state.transformY < -(state.listData.length - 1) * state.lineSpacing) {
            state.transformY = -(state.listData.length - 1) * state.lineSpacing;
        }
    }
}

function setMove(state, move, type, time) {
    state.transformY = move + state.transformY;
    
   
    if (type === 'end') { //手指结束滑动走这里
        if(!isLoopScroll(state)) { 
            calcOverScroll(null, state);
        }

        // 设置滚动距离为lineSpacing的倍数值
        state.transformY = Math.round(state.transformY / state.lineSpacing) * state.lineSpacing;
        
        var deg = ((Math.abs(Math.round(state.transformY / state.lineSpacing)) + 1) * state.rotation)+'deg';
        setTransform(state, state.transformY, type, time, deg);
        state.currIndex = (Math.abs(Math.round(state.transformY/ state.lineSpacing)) + 1);
    } else {
        
        var deg = '0deg';
        if(isLoopScroll(state)) {
            if(state.transformY > state.lineSpacing){
                state.transformY = state.transformY-state.listData.length  * state.lineSpacing
            } 

            if (state.transformY < -state.listData.length  * state.lineSpacing) {
                state.transformY = Math.abs(state.transformY) - state.listData.length * state.lineSpacing;
            }
        }
        setTransform(state, state.transformY, null, null, deg);
        state.currIndex = (Math.abs(Math.round(state.transformY/state.lineSpacing)) + 1);
    }
}


function setTransform(state, translateY = 0, type, time = 0, deg) {
    if (type === "end") { //手指结束滑动时走这里，给过渡动画加上时间
        state.dom.setStyle({
            transition: "transform "+time+"ms cubic-bezier(0.19, 1, 0.22, 1)",
            "margin-top": -state.lineSpacing*state.listData.length*2+'px',
            transform: "translate3d(0, "+translateY+"px, 0)"
        })
    } else {
        state.dom.setStyle({
            transition: "transform "+time+"ms cubic-bezier(0.19, 1, 0.22, 1)",
            "margin-top": -state.lineSpacing*state.listData.length*2+'px',
            transform: "translate3d(0, "+translateY+"px, 0)"
        })
    }
    state.scrollDistance = translateY;
    state.transformY =  translateY;
}


/**
 * 获取100毫秒的距离和时间
 *  */
function getDistance(state) {
    var index = state.moveArr.length-1;
    if(index <=0) {
        return {
            timestamp: 0,
            disY: 0
        }
    }
    var last = state.moveArr[index];
    for(var i = index; i>=0; i--) {
        if(last.timestamp - state.moveArr[i].timestamp<300) {
            index = i;
        }else{
            break;
        }
    }
    if(index === state.moveArr.length-1) {
         return {
            timestamp: 0,
            disY: 0
        }
    }

    return {
        timestamp: last.timestamp - state.moveArr[index].timestamp,
        disY: last.y - state.moveArr[index].y
    }
}

function minLast(state) {
    return (state.listData.length - 1) * state.lineSpacing + (state.listData.length - 3) * state.lineSpacing
}
function maxLast(state) {
    return (state.listData.length - 3) * state.lineSpacing
}

function setChooseValue(state) {
    if(state.isTouch) return;
    var index = Math.round(-state.transformY / state.lineSpacing);
    
    state.wxOwnerInstance.triggerEvent("chooseItem", {
        value: state.listData[index],
        index: index,
        keyIndex: state.keyIndex
    },
    {
        value: state.listData[index],
        index: index,
        keyIndex: state.keyIndex
    }    
    )
}

function setDataIndex(value, state) {
   
    var index = 0;
    var num = state.listData.length;
    for(var i = 0; i < num; i++) {
        if(typeof state.listData[i] === 'object' && state.listData[i].value == value) {
            index = i;
        }else if(state.listData[i] == value){
            index = i
        }
    }
    state.transformY = -index * state.lineSpacing
    state.scrollDistance = state.transformY
    state.dom.setStyle({
        "margin-top": -state.lineSpacing*state.listData.length*2+'px',
        transform: "translate3d(0, "+state.transformY+"px, 0)"
    })
    state.wxOwnerInstance.triggerEvent("chooseItem", {
            value: state.listData[index],
            index: index,
            keyIndex: state.keyIndex
        },
        {
            value: state.listData[index],
            index: index,
            keyIndex: state.keyIndex
        }    
    )
}
/**
 * 过渡动画结束
 */
module.exports = {
    touchStart: function(event, ownerInstance) {
        var state = ownerInstance.selectComponent(".itv-picker-list").getState(); //使用局部变量
        var changedTouches = event.touches[0]
        state.touchParams.startY = changedTouches.pageY;
        state.touchParams.lastY = changedTouches.pageY;
        state.touchParams.startTime = event.timestamp || Date.now();
        state.transformY = state.scrollDistance;  
        return false;
    },
    touchMove: function(event, ownerInstance) {
        var state = ownerInstance.selectComponent(".itv-picker-list").getState(); //使用局部变量
        var changedTouches = event.touches[0];
        var move = changedTouches.pageY - state.touchParams.lastY;
        state.touchParams.lastY = changedTouches.pageY;
        state.touchParams.lastTime = event.timestamp || Date.now();
        state.moveArr.push({
            y: changedTouches.pageY,
            timestamp: event.timestamp || Date.now()
        })
        if(state.moveArr.length > 20) {
            state.moveArr = state.moveArr.splice(-20,20)
        }
        setMove(state, move);
       
        return false
    },
    touchEnd: function(event, ownerInstance) {
        var state = ownerInstance.selectComponent(".itv-picker-list").getState(); //使用局部变量
        var length = state.listData.length;
        var changedTouches = event.changedTouches[0];
        var move =changedTouches.pageY - state.touchParams.lastY;
        state.touchParams.lastY = changedTouches.pageY;
        state.touchParams.lastTime = event.timestamp || Date.now();
        var moveTime = state.touchParams.lastTime - state.touchParams.startTime;
        state.moveArr.push({
            y: changedTouches.pageY,
            timestamp: event.timestamp || Date.now()
        })
        if(state.moveArr.length>20) {
            state.moveArr = state.moveArr.splice(-20,20)
        }


        var moveDis  = getDistance(state);   
        if (Math.abs(moveDis.disY)>= 50) {
            move = moveDis.disY;
            if(Math.abs(move)>(length-1)*state.lineSpacing) {
                if(move>=0) {
                    move = (length-1)*state.lineSpacing
                }else{
                    move = -(length-1)*state.lineSpacing
                }
            }
            moveTime = moveDis.timestamp * 5
            setMove(state, move, 'end', moveTime);
        } else {
            setMove(state, move, 'end', 200);
        }
        state.isTouch = false
        return false
    },
    /**
     * 
     * @param newValue 新值
     * @param oldValue 旧值
     * @param ownerInstance 
     * @param instance 
     */
    reload: function(newValue, oldValue, ownerInstance, instance) {
        wxOwnerInstance  = ownerInstance;
        var res = ownerInstance.selectComponent(".itv-picker-content");
        var content = ownerInstance.selectComponent(".itv-picker-list");
        var state = content.getState();
        state.itemHeight = null;
        state.touchParams = {
            startY: 0,
            endY: 0,
            startTime: 0,
            endTime: 0
        };
        state.currIndex = 1;
        state.isInit = true;
        state.transformY = 0;
        state.scrollDistance = 0;
        state.lineSpacing = 44;
        state.rotation = 24,
        state.timer = null,
        state.isTouch = false,
        state.moveArr = [],
        state.lastIndex = 0,
        state.dom = ownerInstance.selectComponent('.itv-picker-list-panel')
        state.wxOwnerInstance = wxOwnerInstance;
        state.props = JSON.parse(JSON.stringify(content.getDataset()));
        var res = ownerInstance.selectComponent('.itv-picker-content')
        var style = res.getComputedStyle(['height']);
        state.lineSpacing = parseInt(style.height);
        state.dom.setTimeout(function(){
            state.dom.setStyle({
                "margin-top": -state.lineSpacing*state.listData.length*2+'px'
            })
            if(isLoopScroll(state)) {
                state.dom.removeClass('opcity-hide');
            }else{
                state.dom.addClass('opcity-hide');
            }
            
            if(state.defaultValue !== null) {
                setDataIndex(state.defaultValue,state);
            }else{
                setDataIndex(state.listData[0].value, state);
            }
       })

    },
    transitionEnd: function(event, ownerInstance) {
        var state = ownerInstance.selectComponent(".itv-picker-list").getState(); //使用局部变量
        var index = Math.round(-state.transformY / state.lineSpacing);
        if(index > state.listData.length-1) {
            var num = index - state.listData.length;
            state.transformY = -num * state.lineSpacing
        }
        if(index<0) {
            var num = state.listData.length+index;
            state.transformY = -num * state.lineSpacing
        }
        index = Math.round(-state.transformY / state.lineSpacing);
        setTransform(state, state.transformY, null, null, 0);
        setChooseValue(state, state.transformY);
    },
    setListData: function (newValue, oldValue, ownerInstance) {
        var state = ownerInstance.selectComponent(".itv-picker-list").getState();
        if(JSON.stringify(newValue) === JSON.stringify(oldValue)) {
            return;
        }
        state.listData = newValue;

        // 没有初始完成， 或旧值
        if(!oldValue || !state.lineSpacing ) return
        if(isLoopScroll(state)) {
            state.dom.removeClass('opacity-hide');
        }else{
            state.dom.addClass('opacity-hide');
        }
        var index = Math.round(-state.transformY / state.lineSpacing);
        if(oldValue.length > newValue.length) {
            //当前的数组数理比 新数组的索引要大时
            if(index > newValue.length -1) {
                state.transformY = -(state.listData.length - 1) * state.lineSpacing;
                state.scrollDistance = state.transformY;
                index = state.listData.length - 1;
                state.dom.setStyle({
                    "margin-top": -state.lineSpacing*state.listData.length*2+'px',
                    transform: "translate3d(0, "+state.transformY+"px, 0)"
                })
            }else{
                state.dom.setStyle({
                    "margin-top": -state.lineSpacing*state.listData.length*2+'px',
                    transform: "translate3d(0, "+state.transformY+"px, 0)"
                })
            }
        }else{
            state.dom.setStyle({
                "margin-top": -state.lineSpacing*state.listData.length*2+'px',
                transform: "translate3d(0, "+state.transformY+"px, 0)"
            })
        }
        setChooseValue(state)
       
    },
    setDefaultValue: function(newValue, oldValue, ownerInstance) {
        var state = ownerInstance.selectComponent(".itv-picker-list").getState();
        state.defaultValue = newValue;
       
    },
    setKeyIndex: function(newValue, oldValue, ownerInstance) {
        var state = ownerInstance.selectComponent(".itv-picker-list").getState();
        state.keyIndex = newValue;
    }
    
}